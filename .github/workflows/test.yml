# Runs the complete test suite incl. many external command line dependencies (like Openbabel)
# as well as the pymatgen.ext package. Coverage is computed based on this workflow.
name: Tests

on:
  push:
    branches: [master,cov-fix]
    paths-ignore: ["**/*.md", docs/**]
  pull_request:
    branches: [master]
    paths-ignore: ["**/*.md", docs/**]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      task:
        type: choice
        options: [tests, release]
        default: tests
        description: Only run tests or release a new version of pymatgen to PyPI after tests pass.

permissions:
  contents: read

jobs:
  test:
    # prevent this action from running on forks
    if: github.repository == 'materialsproject/pymatgen'
    strategy:
      fail-fast: false
      matrix:
        # pytest-split automatically distributes work load so parallel jobs finish in similar time
        os: [ubuntu-latest]
        python-version: ["3.11"]
        split: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


    runs-on: ${{ matrix.os }}

    env:
      PMG_MAPI_KEY: ${{ secrets.PMG_MAPI_KEY }}
      MPLBACKEND: Agg # https://github.com/orgs/community/discussions/26434
      PMG_TEST_FILES_DIR: ${{ github.workspace }}/tests/files
      GULP_LIB: ${{ github.workspace }}/cmd_line/gulp/Libraries

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: setup.py
      - name: Add CLIs to GITHUB_PATH
        if: runner.os != 'Windows'
        # This is the way to update env variables in a way that persist for the entire job.
        run: |
          for pkg in cmd_line/*;
            do echo "$(pwd)/cmd_line/$pkg/Linux_64bit" >> "$GITHUB_PATH";
          done
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install numpy cython packaging
          python -m pip install -e '.[dev,optional]'
      - name: pytest split ${{ matrix.split }}
        # to update the test durations, run
        # pytest --store-durations --durations-path test_files/.pytest-split-durations
        # and commit the results (requires pip install pytest-split)
        run: |
          pytest --cov=pymatgen --cov-report=xml --splits 10 --group ${{ matrix.split }} --durations-path test_files/.pytest-split-durations tests/util
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.split }}.xml
          path: coverage.xml

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v3
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  build_sdist:
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.task == 'release')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.10"
      - run: |
          python -m pip install build
          pip install -e .
      - name: Build sdist
        run: python -m build --sdist
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  build_wheels:
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.task == 'release')
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["38", "39", "310", "311"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14.1
        env:
          CIBW_BUILD: cp${{ matrix.python-version }}-*
      - name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.task == 'release')
    runs-on: ubuntu-latest
    permissions:
      # For pypi trusted publishing
      id-token: write
    steps:
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - name: Publish to PyPi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verbose: true
